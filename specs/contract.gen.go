// Package specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package specs

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
)

// AddSong defines model for AddSong.
type AddSong struct {
	// Id Идентификатор трека
	Id int `json:"id"`

	// PlayListId Идентификатор плейлиста
	PlayListId int `json:"playListId"`

	// SongName Имя трека
	SongName string `json:"songName"`
}

// Pause defines model for Pause.
type Pause struct {
	// Id Идентификатор плейлиста
	Id int `json:"id"`
}

// Play defines model for Play.
type Play struct {
	// Id Идентификатор плейлиста
	Id int `json:"id"`
}

// AddSongJSONRequestBody defines body for AddSong for application/json ContentType.
type AddSongJSONRequestBody = AddSong

// CreatePlayListJSONRequestBody defines body for CreatePlayList for application/json ContentType.
type CreatePlayListJSONRequestBody = Play

// PauseListJSONRequestBody defines body for PauseList for application/json ContentType.
type PauseListJSONRequestBody = Pause

// PlayListJSONRequestBody defines body for PlayList for application/json ContentType.
type PlayListJSONRequestBody = Play

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Добавление трека.
	// (POST /v1/playlist/addSong)
	AddSong(w http.ResponseWriter, r *http.Request)
	// Создать плейлист.
	// (POST /v1/playlist/create)
	CreatePlayList(w http.ResponseWriter, r *http.Request)
	// Следующий трек.
	// (GET /v1/playlist/next)
	NextSong(w http.ResponseWriter, r *http.Request)
	// Приостановить воспроизведение.
	// (POST /v1/playlist/pause)
	PauseList(w http.ResponseWriter, r *http.Request)
	// Начать воспроизведение.
	// (POST /v1/playlist/play)
	PlayList(w http.ResponseWriter, r *http.Request)
	// Предыдущий трек.
	// (GET /v1/playlist/prev)
	PrevSong(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddSong operation middleware
func (siw *ServerInterfaceWrapper) AddSong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddSong(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreatePlayList operation middleware
func (siw *ServerInterfaceWrapper) CreatePlayList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePlayList(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// NextSong operation middleware
func (siw *ServerInterfaceWrapper) NextSong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.NextSong(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PauseList operation middleware
func (siw *ServerInterfaceWrapper) PauseList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PauseList(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PlayList operation middleware
func (siw *ServerInterfaceWrapper) PlayList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlayList(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PrevSong operation middleware
func (siw *ServerInterfaceWrapper) PrevSong(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PrevSong(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/playlist/addSong", wrapper.AddSong)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/playlist/create", wrapper.CreatePlayList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/playlist/next", wrapper.NextSong)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/playlist/pause", wrapper.PauseList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/v1/playlist/play", wrapper.PlayList)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/v1/playlist/prev", wrapper.PrevSong)
	})

	return r
}
